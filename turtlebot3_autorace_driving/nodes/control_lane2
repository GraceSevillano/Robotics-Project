#!/usr/bin/env python
# -*- coding: utf-8 -*-

# ... Tus importaciones existentes ...

class ControlLane():
    def __init__(self):
        # ... Tu inicialización existente ...
        
        # Publicador para la imagen procesada
        self.pub_processed_image = rospy.Publisher('/camera/processed_image', Image, queue_size=1)

    def camera_callback(self, data):
        try:
            frame = self.bridge.imgmsg_to_cv2(data, "bgr8")
        except CvBridgeError as e:
            print(e)

        self.detect_aruco(frame)

    def detect_aruco(self, frame):
        gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
        aruco_dict = aruco.Dictionary_get(aruco.DICT_6X6_250)
        parameters = aruco.DetectorParameters_create()
        corners, ids, rejectedImgPoints = aruco.detectMarkers(gray, aruco_dict, parameters=parameters)

        if ids is not None:
            self.aruco_detected = True
            aruco.drawDetectedMarkers(frame, corners, ids)
        else:
            self.aruco_detected = False

        # Convierte la imagen procesada de vuelta a un mensaje de ROS y publícala
        try:
            self.pub_processed_image.publish(self.bridge.cv2_to_imgmsg(frame, "bgr8"))
        except CvBridgeError as e:
            print(e)

# ... Resto de tu clase y script ...
