#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import rospy
import numpy as np
from std_msgs.msg import Float64, UInt8, String
from geometry_msgs.msg import Twist
#from sensor_msgs.msg import Image
#from cv_bridge import CvBridge, CvBridgeError

from pyniryo import *
import sys

class ControlLane():
    def __init__(self):
        self.sub_lane = rospy.Subscriber('/control/lane', Float64, self.cbFollowLane, queue_size=1)
        self.sub_max_vel = rospy.Subscriber('/control/max_vel', Float64, self.cbGetMaxVel, queue_size=1)
        self.pub_cmd_vel = rospy.Publisher('/control/cmd_vel', Twist, queue_size=1)
        
        self.pub_niryo = rospy.Publisher('/niryo_con', UInt8, queue_size=10)
        self.sub_niryo = rospy.Subscriber('/niryo_con', UInt8, self.communicate_with_niryo, queue_size = 1)

        self.aruco_detected_distance = rospy.Subscriber('/aruco_distance', Float64, self.arucoCallBack, queue_size = 1)
        #self.sub_aruco_detected = rospy.Subscriber('/aruco/detected', String, self.aruco_detected_callback)

        self.lastError = 0
        self.stopped = False
        self.MAX_VEL = 0.1
        self.niryoespera= True

        rospy.on_shutdown(self.fnShutDown)

    def cbGetMaxVel(self, max_vel_msg ):
        self.MAX_VEL = max_vel_msg.data

    def arucoCallBack(self, msg):
        distancia_ = msg.data
        if 0.18 < distancia_ < 0.19:
            self.stopped = True
            self.niryoespera = True
            
    def communicate_with_niryo(self, msg):
        if msg.data == 2:
            self.stopped = False
            self.niryoespera = False

    def cbFollowLane(self, desired_center):

        if not self.stopped and not self.niryoespera:
            print("Continua moviendose")
            center = desired_center.data

            error = center - 500

            Kp = 0.0025
            Kd = 0.007

            angular_z = Kp * error + Kd * (error - self.lastError)
            self.lastError = error

            twist = Twist()
            # twist.linear.x = 0.05        
            twist.linear.x = min(self.MAX_VEL * ((1 - abs(error) / 500) ** 2.2), 0.05)

            twist.linear.y = 0
            twist.linear.z = 0
            twist.angular.x = 0
            twist.angular.y = 0
            twist.angular.z = -max(angular_z, -2.0) if angular_z < 0 else -min(angular_z, 2.0)
            self.pub_cmd_vel.publish(twist)

        elif self.niryoespera:
            print("Niryo manda la senal chico")
            self.pub_niryo.publish(1)

        else:
            print("FINITO")
            self.stopped = True

    def fnShutDown(self):
        rospy.loginfo("Shutting down. cmd_vel sera 0")
        #self.pub_cmd_vel.publish(Twist())

        twist = Twist()
        twist.linear.x = 0
        twist.linear.y = 0
        twist.linear.z = 0
        twist.angular.x = 0
        twist.angular.y = 0
        twist.angular.z = 0
        self.pub_cmd_vel.publish(twist) 

    def main(self):
        rospy.spin()


if __name__ == '__main__':
    rospy.init_node('control_lane')
    node = ControlLane()
    node.main()
